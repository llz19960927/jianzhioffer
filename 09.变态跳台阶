题目描述
一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。

思路1:
状态定义：数组元素值代表跳上该台阶有几个跳法。
转移方程：dp[i] = dp[i-1] + dp[i-2] + ... + dp[1] + dp[0]
初始状态：dp[0]=1，dp[1]=1
返回值：dp[i]

解法1(时间复杂度n^2,空间复杂度n)：
public class Solution {
    public int JumpFloorII(int target) {
        int[] steps = new int[target+1];
        steps[0] = 1;
        steps[1] = 1;
        if(target==1){
            return steps[1];
        }
        for(int i=2;i<=target;i++){
            for(int j=0;j<i;j++){
                steps[i] += steps[j];
            }
        }
        return steps[target];
    }
}

★思路2:
重新看一下上述结论：
dp[n]  = dp[n-1]+dp[n-2]+......+dp[0];
dp[n-1]=         dp[n-2]+......+dp[0];
可以改进解法1，降低时间复杂度！

解法2(时间复杂度n,空间复杂度1)：
public class Solution {
    public int JumpFloorII(int target) {
        int a = 1;
        for(int i=2;i<=target;i++){
            a*=2;
        }
        return a;
    }
}
