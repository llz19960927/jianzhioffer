解法一（递归）：时间复杂度n，空间复杂度n
牛客网(返回ArrayList)：
import java.util.*;
public class Solution {
    ArrayList<Integer> arr = new ArrayList();
    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {
        if(listNode!=null){
            printListFromTailToHead(listNode.next);
            arr.add(listNode.val);
        }
        return arr;
    }
}
总结：
  1.递归的本质是一个栈！！！可以利用递归实现栈。
  2.递归的return语句：递归循环体里面的return语句并不会直接终止整个程序，而是跳出该层递归函数体继续执行上一层递归。
    tips：return语句不一定需要定义一个返回值来接收！按需要定义。
LeetCode(返回list)：
class Solution {
    ArrayList<Integer> arr = new ArrayList<>();
    public int[] reversePrint(ListNode head) {
        recur(head);
        int[] res = new int[arr.size()];
        for(int i=0;i<res.length;i++){
            res[i] = arr.get(i);
        }
        return res;
    }
    public void recur(ListNode head){
        if(head!=null){
            recur(head.next);
            arr.add(head.val);
        }
    }
}

解法二(栈)：时间复杂度n，空间复杂度n
略

