题目描述：
请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。
如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。
[["a","b","c","e"],
["s","f","c","s"],
["a","d","e","e"]]
但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。

示例 1：
输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
输出：true

示例 2：
输入：board = [["a","b"],["c","d"]], word = "abcd"
输出：false

思路：使用深度优先搜索（DFS）实现，三个解法时间复杂度均为O(3^K * MN) ,空间复杂度均为O(K)
解法1：暴力解法
class Solution {
    // private int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    public boolean exist(char[][] board, String word) {
        boolean[][] visited = new boolean[board.length][board[0].length];
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                boolean flag = check(board, visited, i, j, word, 0);
                if (flag){
                    return true;
                }
            }
        }
        return false;
    }

    public boolean check(char[][] board, boolean[][] visited, int x, int y, String word, int index){
        if (board[x][y] != word.charAt(index)) {
            return false;
        }
        else if (index == word.length() - 1) {
            return true;
        }else{
            int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
            visited [x][y] = true;
            for (int[] dir : directions) {
                int newx = x + dir[0], newy = y + dir[1];
                if (newx >= 0 && newx < board.length && newy >= 0 && newy < board[0].length) {
                    if (!visited[newx][newy]) {
                        boolean flag = check(board, visited, newx, newy, word, index+1);
                        if (flag) {
                            return true;
                        }
                    }
                }
            }
        }
        visited [x][y] = false;
        return false;
    }
}

解法2：使用'\0'替代visited矩阵：
class Solution {
    public boolean exist(char[][] board, String word) {
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                boolean flag = check(board, i, j, word, 0);
                if (flag){
                    return true;
                }
            }
        }
        return false;
    }

    public boolean check(char[][] board, int x, int y, String word, int index){
        boolean res = false;
        if (board[x][y] != word.charAt(index)) {
            return false;
        }
        else if (index == word.length() - 1) {
            return true;
        }else{
            int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
            board[x][y] = '\0';
            for (int[] dir : directions) {
                int newx = x + dir[0], newy = y + dir[1];
                if (newx >= 0 && newx < board.length && newy >= 0 && newy < board[0].length) {
                    if (board[newx][newy] != '\0') {
                        boolean flag = check(board, newx, newy, word, index+1);
                        if (flag) {
                            res = flag;
                            break;
                        }
                    }
                }
            }
            board[x][y] = word.charAt(index);
        }
        return res;
    }
}

★解法3：简化代码，形成模板。
class Solution {
    private int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    public boolean exist(char[][] board, String word) {
        char[] words = word.toCharArray();
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if (dfs(board, i, j, words, 0)) return true;
            }
        }
        return false;
    }

    public boolean dfs(char[][] board, int x, int y, char[] words, int index){
        if (x<0 || x>=board.length || y<0 || y>=board[0].length || board[x][y]!=words[index]) return false;
        if (index == words.length-1) return true;
        board[x][y] = '\0';
        // boolean res = dfs(board, x+1, y, words, index+1) || dfs(board, x, y+1, words, index+1) || dfs(board, x-1, y, words, index+1) || dfs(board, x, y-1, words, index+1);
        for (int[] dir : directions) {
            int newx = x + dir[0], newy = y + dir[1];
            if (dfs(board, newx, newy, words, index+1)) return true;
        }
        board[x][y] = words[index];
        return false;
    }
}

















