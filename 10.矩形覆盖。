题目描述
我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？
输入为0-n

思路：
本质上和斐波那契数列一样，使用动态规划最优，不同之处在于输入0-n对应的输出序列为：0,1,2,3,5...,第一个数0不满足dp[i+1] = dp[i] + dp[i-1]，需要单独讨论！
状态定义：元素值代表覆盖方法数。
转移方程：dp[i+1] = dp[i] + dp[i-1]
初始状态：dp[1]=1, dp[2]=2
返回值：dp[i] + dp[i-1]。


解法：
public class Solution {
    public int RectCover(int target) {
        int a = 1;
        int b = 2;
        int tempt;
        if(target<=1){
            return target;
        }
        for(int i=2;i<target;i++){
            tempt = a+b;
            a = b;
            b = tempt;
        }
        return b;
    }
}
