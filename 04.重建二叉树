题目描述：
输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。

思路：前序遍历的第一个结点是根节点，根据根结点在中序遍历的位置可以得到左子树和右子树的中序遍历序列，根据左子树和右子树的序列长度，可以在前序遍历里得到左子树和右子树的前序遍历序列，递归即可。

解法一（对原方法一直递归，时间复杂度n^2，空间复杂度n^2）：
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
import java.util.HashMap;
import java.util.Arrays;
public class Solution {
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
        HashMap<Integer, Integer> m = new HashMap<Integer, Integer>();
        for(int i=0;i<in.length;i++){
            m.put(in[i],i);
        }
        int root = pre[0];
        int index = m.get(root);
        TreeNode t = new TreeNode(root);
        int [] l = Arrays.copyOfRange(in,0,index);
        int [] r = Arrays.copyOfRange(in,index+1,in.length);
        if (index==0){
            t.left=null;
        }else{
            t.left = reConstructBinaryTree(Arrays.copyOfRange(pre,1,l.length+1),l);
        }
        if(index == in.length-1){
            t.right=null;
        }else{
            t.right = reConstructBinaryTree(Arrays.copyOfRange(pre,l.length+1,pre.length),r);
        }
        return t;
    }
}

解法2(定义一个新方法，不创建新对象，用改变坐标的方式代替创建不同子树)：
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
import java.util.HashMap;
import java.util.Arrays;
public class Solution {
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
        HashMap<Integer, Integer> m = new HashMap<Integer, Integer>();
        for(int i=0;i<in.length;i++){
            m.put(in[i],i);
        }
        TreeNode t = reConstructBinaryTree_son(m,pre,0,pre.length-1,in,0,in.length-1);
        return t;
    }
    public TreeNode reConstructBinaryTree_son(HashMap<Integer, Integer> m,int [] pre,int preStart,int preEnd,int [] in,int inStart,int inEnd){
        if(preStart>preEnd){//判断：当根节点没有左子树或者没有右子树时，根节点root会出现在中序遍历的左端或者右端，此时继续调用reConstructBinaryTree_son方法会导致开始坐标大于结束坐标，返回null,也可以使用(inStart>inEnd)判断，都一样。
            return null;
        }
        int root = pre[preStart];
        int root_index = m.get(root);
        TreeNode t = new TreeNode(root);
        if (preStart==preEnd){//当一直向下遍历至子结点(左右子树都没有)时，preStart会等于preEnd，此时直接输出left/right都为null的对象即可。也可以使用(inStart==inEnd)判断，都一样！
            return t;
        }else{
            int left_length = root_index-inStart;
            int right_length = inEnd-root_index;
            t.left = reConstructBinaryTree_son(m,pre,preStart+1,preStart+left_length,in,inStart,root_index-1);
            t.right = reConstructBinaryTree_son(m,pre,preStart+left_length+1,preEnd,in,root_index+1,inEnd);
        }
        return t;
    }
}
