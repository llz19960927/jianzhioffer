题目描述
输入一个整数，输出该数32位二进制表示中1的个数。其中负数用补码表示。

思路1(暴力解法)：
java中有三种移位运算符：
  <<:左移运算符，num << 1,相当于num乘以2
  >>:右移运算符，num >> 1,相当于num除以2
  >>>:无符号右移，忽略符号位，空位都以0补齐
题目中输入有正有负，可以使用Java中的>>>无符号右移来忽略负数影响！

解法1(时间复杂度logn,空间复杂度1)：
public class Solution {
    public int NumberOf1(int n) {
        int count = 0;
        while(n!=0){
            count+=n&1;
            n>>>=1;
        }
        return count;
    }
}

思路2：
使用普通移位(<<,>>),把000...001不断向左移位，和输入数字比较

解法2(时间复杂度logn,空间复杂度1)：
public class Solution {
    public int NumberOf1(int n) {
        int count = 0;
        for(int i=0;i<32;i++){
            if ((n & (1 << i)) != 0){
                count++;
            }
        }
        return count;
    }
}

★思路3(巧用n&(n-1))：
每次执行n&(n-1)可以消去一个1！！！
  1.n = XXX1时，n&(n-1)=XXX0，消去一个1。
  2.n = XXX100时，n&(n-1)=XXX000，消去一个1.
可以节省时间复杂度。

解法3(时间复杂度M(M为输入二进制数中为1的位数)，空间复杂度1)：
public class Solution {
    public int NumberOf1(int n) {
        int count = 0;
        while(n!=0){
            count++;
            n = n&(n-1);
        }
        return count;
    }
}








